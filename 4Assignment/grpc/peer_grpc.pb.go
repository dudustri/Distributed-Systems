// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: grpc/peer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CriticalSection_RequestToEnterCriticalSection_FullMethodName       = "/peerMutex.CriticalSection/RequestToEnterCriticalSection"
	CriticalSection_LeaveCriticalSection_FullMethodName                = "/peerMutex.CriticalSection/LeaveCriticalSection"
	CriticalSection_ValidateRequestEnterCriticalSection_FullMethodName = "/peerMutex.CriticalSection/ValidateRequestEnterCriticalSection"
)

// CriticalSectionClient is the client API for CriticalSection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriticalSectionClient interface {
	RequestToEnterCriticalSection(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	LeaveCriticalSection(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	ValidateRequestEnterCriticalSection(ctx context.Context, in *ValidationMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type criticalSectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalSectionClient(cc grpc.ClientConnInterface) CriticalSectionClient {
	return &criticalSectionClient{cc}
}

func (c *criticalSectionClient) RequestToEnterCriticalSection(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, CriticalSection_RequestToEnterCriticalSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalSectionClient) LeaveCriticalSection(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, CriticalSection_LeaveCriticalSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalSectionClient) ValidateRequestEnterCriticalSection(ctx context.Context, in *ValidationMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, CriticalSection_ValidateRequestEnterCriticalSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriticalSectionServer is the server API for CriticalSection service.
// All implementations must embed UnimplementedCriticalSectionServer
// for forward compatibility
type CriticalSectionServer interface {
	RequestToEnterCriticalSection(context.Context, *RequestMessage) (*ResponseMessage, error)
	LeaveCriticalSection(context.Context, *RequestMessage) (*ResponseMessage, error)
	ValidateRequestEnterCriticalSection(context.Context, *ValidationMessage) (*ResponseMessage, error)
	mustEmbedUnimplementedCriticalSectionServer()
}

// UnimplementedCriticalSectionServer must be embedded to have forward compatible implementations.
type UnimplementedCriticalSectionServer struct {
}

func (UnimplementedCriticalSectionServer) RequestToEnterCriticalSection(context.Context, *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToEnterCriticalSection not implemented")
}
func (UnimplementedCriticalSectionServer) LeaveCriticalSection(context.Context, *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCriticalSection not implemented")
}
func (UnimplementedCriticalSectionServer) ValidateRequestEnterCriticalSection(context.Context, *ValidationMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRequestEnterCriticalSection not implemented")
}
func (UnimplementedCriticalSectionServer) mustEmbedUnimplementedCriticalSectionServer() {}

// UnsafeCriticalSectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalSectionServer will
// result in compilation errors.
type UnsafeCriticalSectionServer interface {
	mustEmbedUnimplementedCriticalSectionServer()
}

func RegisterCriticalSectionServer(s grpc.ServiceRegistrar, srv CriticalSectionServer) {
	s.RegisterService(&CriticalSection_ServiceDesc, srv)
}

func _CriticalSection_RequestToEnterCriticalSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServer).RequestToEnterCriticalSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalSection_RequestToEnterCriticalSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServer).RequestToEnterCriticalSection(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalSection_LeaveCriticalSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServer).LeaveCriticalSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalSection_LeaveCriticalSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServer).LeaveCriticalSection(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalSection_ValidateRequestEnterCriticalSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServer).ValidateRequestEnterCriticalSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CriticalSection_ValidateRequestEnterCriticalSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServer).ValidateRequestEnterCriticalSection(ctx, req.(*ValidationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CriticalSection_ServiceDesc is the grpc.ServiceDesc for CriticalSection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriticalSection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peerMutex.CriticalSection",
	HandlerType: (*CriticalSectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToEnterCriticalSection",
			Handler:    _CriticalSection_RequestToEnterCriticalSection_Handler,
		},
		{
			MethodName: "LeaveCriticalSection",
			Handler:    _CriticalSection_LeaveCriticalSection_Handler,
		},
		{
			MethodName: "ValidateRequestEnterCriticalSection",
			Handler:    _CriticalSection_ValidateRequestEnterCriticalSection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/peer.proto",
}
